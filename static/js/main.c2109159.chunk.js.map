{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","_super","call","state","player","squares","Array","fill","gameOver","win_line","audio_play","audio","Audio","loop","playAudio","bind","assertThisInitialized","newGame","play","_this2","boardFull","filter","item","length","winner","find","indices","_indices","slicedToArray","a","b","c","line","every","win","undefined","setState","e","_this3","cell","target","getAttribute","setAttribute","map","index","parseInt","id","gameUpdate","start","end","_this4","colors","from","keys","slice","num","react_default","createElement","key","className","includes","onClick","clicked","String","paused","volume","pause","gameOverMsg","concat","react_fontawesome_index_es","icon","faMusic","rows_fill","href","rel","React","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.c2109159.chunk.js","sourcesContent":["import { faMusic } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      player: \"X\",\r\n      squares: Array(9).fill(\"\"),\r\n      gameOver: false,\r\n      win_line: [],\r\n      audio_play: true,\r\n    };\r\n    this.audio = new Audio(\"https://mp3.chillhop.com/serve.php/?mp3=9272\");\r\n    this.audio.loop = true;\r\n    this.playAudio = this.playAudio.bind(this);\r\n    this.newGame = this.newGame.bind(this);\r\n    this.play = this.play.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Update the state of the game after every input\r\n   */\r\n  gameUpdate() {\r\n    /**\r\n     * Cells which indicate a vertical, horizontal, or disgonal line\r\n     */\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    /**\r\n     * Board is full when 0 squares are \"\"\r\n     */\r\n    const boardFull =\r\n      this.state.squares.filter((item) => {\r\n        return item === \"\";\r\n      }).length === 0;\r\n    /**\r\n     *  A player has won if they get the same character to fill an entire line\r\n     */\r\n    const winner = lines.find((indices) => {\r\n      const [a, b, c] = indices;\r\n      const line = [\r\n        this.state.squares[a],\r\n        this.state.squares[b],\r\n        this.state.squares[c],\r\n      ];\r\n      return line.every((item) => {\r\n        return item === line[0] && line[0] !== \"\";\r\n      });\r\n    });\r\n    const win = winner !== undefined;\r\n    /**\r\n     * The winning player is \"Tie\" if the board is full and no one has won\r\n     * Game end when someone has won or the board is full\r\n     * The next player gets picked as the opposite player if the game isn't over yet\r\n     */\r\n    this.setState(\r\n      {\r\n        player: boardFull && !win ? \"Tie\" : this.state.player,\r\n        gameOver: win || boardFull,\r\n        win_line: win ? winner : this.state.win_line,\r\n      },\r\n      () => {\r\n        if (!this.state.gameOver) {\r\n          this.setState({ player: this.state.player === \"X\" ? \"O\" : \"X\" });\r\n        }\r\n      }\r\n    );\r\n  }\r\n  /**\r\n   * Handle the user clicking on a cell to input their move\r\n   * @param  {\"event\"} e The onClick event\r\n   */\r\n  play(e) {\r\n    const cell = e.target;\r\n    const clicked = cell.getAttribute(\"clicked\");\r\n    if (clicked === \"false\" && this.state.gameOver !== true) {\r\n      cell.setAttribute(\"clicked\", \"true\");\r\n      this.setState(\r\n        {\r\n          squares: this.state.squares.map((item, index) => {\r\n            return index === parseInt(cell.id) ? this.state.player : item;\r\n          }),\r\n        },\r\n        this.gameUpdate\r\n      );\r\n    }\r\n  }\r\n  /**\r\n   * Create the table data for the board\r\n   * @param  {int} start - Cell # to start from\r\n   * @param  {int} end - Cell # to end (exclusive)\r\n   * @returns JSX elements of specified cell numbers\r\n   */\r\n  rows_fill(start, end) {\r\n    const colors = [\r\n      \"green\",\r\n      \"red\",\r\n      \"red\",\r\n      \"blue\",\r\n      \"green\",\r\n      \"red\",\r\n      \"blue\",\r\n      \"blue\",\r\n      \"green\",\r\n    ];\r\n    return Array.from(Array(10).keys())\r\n      .slice(start, end)\r\n      .map((num) => {\r\n        return (\r\n          <td\r\n            key={num}\r\n            className={this.state.win_line.includes(num) ? \"win\" : colors[num]}\r\n            onClick={this.play}\r\n            clicked={this.state.squares[num] === \"\" ? \"false\" : \"true\"}\r\n            id={String(num)}\r\n          >\r\n            <h1>{this.state.squares[num]}</h1>\r\n          </td>\r\n        );\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Play and pause background music\r\n   */\r\n  playAudio() {\r\n    if (this.audio.paused) {\r\n      this.audio.volume = 0.2;\r\n      this.audio.play();\r\n      this.setState({ audio_play: true });\r\n    } else {\r\n      this.audio.pause();\r\n      this.setState({ audio_play: false });\r\n    }\r\n  }\r\n  newGame() {\r\n    this.setState({\r\n      player: \"X\",\r\n      squares: Array(9).fill(\"\"),\r\n      gameOver: false,\r\n      win_line: [],\r\n    });\r\n  }\r\n  render() {\r\n    const gameOverMsg =\r\n      this.state.player === \"Tie\" ? \"Tie\" : `Winner:  ${this.state.player}`;\r\n    const end = (\r\n      <div id=\"end\">\r\n        <h1>{gameOverMsg}</h1>\r\n        <button onClick={this.newGame}>Play Again</button>\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"App\">\r\n        <div onClick={this.playAudio}>\r\n          <div className=\"header\">\r\n            <h1>Tic Tac Toe</h1>\r\n            <p>\r\n              <FontAwesomeIcon icon={faMusic} />\r\n            </p>\r\n          </div>\r\n          <p\r\n            id=\"audio-msg\"\r\n            className={this.state.audio_play ? \"invisible\" : \"mono\"}\r\n          >\r\n            Click here to play music\r\n          </p>\r\n        </div>\r\n        <table id=\"board\">\r\n          <tbody>\r\n            <tr>{this.rows_fill(0, 3)}</tr>\r\n            <tr>{this.rows_fill(3, 6)}</tr>\r\n            <tr>{this.rows_fill(6, 9)}</tr>\r\n          </tbody>\r\n        </table>\r\n        <div id=\"bottom\">\r\n          {this.state.gameOver ? end : <h1>Player: {this.state.player}</h1>}\r\n        </div>\r\n        <h3 className=\"mono\">\r\n          Made by\r\n          <a\r\n            href=\"https://github.com/akamran2001/Tic-Tac-Toe\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {\" Ahmed Kamran \"}\r\n          </a>\r\n          {\"Music: \"}\r\n          <a\r\n            href=\"https://chll.to/0ac21dd1\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Aiguille - Day and Night\r\n          </a>\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}