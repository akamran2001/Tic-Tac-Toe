{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","_super","call","gameUpdate","lines","range","forEach","num","push","boardFull","without","state","squares","length","winner","find","indices","_indices","slicedToArray","a","b","c","line","noDup","uniq","win","undefined","setState","player","gameOver","win_line","updatePoint","play","e","cell","target","cell_id","parseInt","id","getAttribute","setAttribute","slice","concat","rows_fill","start","end","colors","map","react_default","createElement","key","className","includes","onClick","clicked","String","playAudio","audio","paused","volume","audio_play","pause","newGame","first","Array","fill","points","X","O","componentDidMount","render","gameOverMsg","react_fontawesome_index_es","icon","faMusic","href","rel","random","Audio","loop","React","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.26861c08.chunk.js","sourcesContent":["import { faMusic } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { random, range, uniq, without } from \"lodash\";\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      first: [true, false][random(0, 1, false)], //true = X, false = O\r\n      player: \"\",\r\n      squares: Array(9).fill(\"\"),\r\n      gameOver: false,\r\n      win_line: [],\r\n      audio_play: false,\r\n      points: {\r\n        X: 0,\r\n        O: 0,\r\n      },\r\n    };\r\n    this.audio = new Audio(\"https://mp3.chillhop.com/serve.php/?mp3=9272\");\r\n    this.audio.loop = true;\r\n  }\r\n  /**\r\n   * Update the state of the game after every input\r\n   */\r\n  gameUpdate = () => {\r\n    /**\r\n     * Cells which indicate a vertical, horizontal, or diagonal line\r\n     */\r\n    const lines = [range(0, 9, 4), range(2, 8, 2)];\r\n    [0, 3, 6].forEach((num) => lines.push(range(num, num + 3)));\r\n    [0, 1, 2].forEach((num) => lines.push(range(num, 9, 3)));\r\n    /**\r\n     * Board is full when none of the 9 squares are \"\"\r\n     */\r\n\r\n    const boardFull = without(this.state.squares, \"\").length === 9;\r\n    /**\r\n     *  A player has won if they get the same character to fill an entire line\r\n     */\r\n    const winner = lines.find((indices) => {\r\n      const [a, b, c] = indices;\r\n      const line = [\r\n        this.state.squares[a],\r\n        this.state.squares[b],\r\n        this.state.squares[c],\r\n      ];\r\n      const noDup = uniq(line);\r\n      return noDup.length === 1 && noDup[0] !== \"\";\r\n    });\r\n    const win = winner !== undefined;\r\n    /**\r\n     * The winning player is \"Tie\" if the board is full and no one has won\r\n     * Game end when someone has won or the board is full\r\n     * The next player gets picked as the opposite player if the game isn't over yet\r\n     */\r\n    this.setState(\r\n      {\r\n        player: boardFull && !win ? \"Tie\" : this.state.player,\r\n        gameOver: win || boardFull,\r\n        win_line: win ? winner : this.state.win_line,\r\n      },\r\n      () => {\r\n        if (!this.state.gameOver) {\r\n          this.setState({ player: this.state.player === \"X\" ? \"O\" : \"X\" }); //Only switch player after state of game set\r\n        } else {\r\n          this.updatePoint();\r\n        }\r\n      }\r\n    );\r\n  };\r\n  /**\r\n   * Handle the user clicking on a cell to input their move\r\n   * @param  {\"event\"} e The onClick event\r\n   */\r\n  play = (e) => {\r\n    const cell = e.target;\r\n    const cell_id = parseInt(cell.id);\r\n    const clicked = cell.getAttribute(\"clicked\");\r\n    if (clicked === \"false\" && this.state.gameOver !== true) {\r\n      cell.setAttribute(\"clicked\", \"true\");\r\n      this.setState(\r\n        {\r\n          squares: this.state.squares\r\n            .slice(0, cell_id)\r\n            .concat(this.state.player) //Replace selected cell with player character\r\n            .concat(this.state.squares.slice(cell_id + 1)),\r\n        },\r\n        this.gameUpdate\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Create the table data for the board\r\n   * @param  {int} start - Cell # to start from\r\n   * @param  {int} end - Cell # to end (exclusive)\r\n   * @returns JSX elements of specified cell numbers\r\n   */\r\n  rows_fill = (start, end) => {\r\n    const colors = [\r\n      \"green\",\r\n      \"red\",\r\n      \"red\",\r\n      \"blue\",\r\n      \"green\",\r\n      \"red\",\r\n      \"blue\",\r\n      \"blue\",\r\n      \"green\",\r\n    ];\r\n    return range(start, end).map((num) => {\r\n      return (\r\n        <td\r\n          key={num}\r\n          className={this.state.win_line.includes(num) ? \"win\" : colors[num]}\r\n          onClick={this.play}\r\n          clicked={this.state.squares[num] === \"\" ? \"false\" : \"true\"}\r\n          id={String(num)}\r\n        >\r\n          <h1>{this.state.squares[num]}</h1>\r\n        </td>\r\n      );\r\n    });\r\n  };\r\n  /**\r\n   * Play and pause background music\r\n   */\r\n  playAudio = () => {\r\n    if (this.audio.paused) {\r\n      this.audio.volume = 0.2;\r\n      this.audio.play();\r\n      this.setState({ audio_play: true });\r\n    } else {\r\n      this.audio.pause();\r\n      this.setState({ audio_play: false });\r\n    }\r\n  };\r\n  newGame = () => {\r\n    this.setState({\r\n      player: !this.state.first ? \"X\" : \"O\",\r\n      first: !this.state.first,\r\n      squares: Array(9).fill(\"\"),\r\n      gameOver: false,\r\n      win_line: [],\r\n    });\r\n  };\r\n  updatePoint = () => {\r\n    this.setState({\r\n      points: {\r\n        X:\r\n          this.state.player == \"X\"\r\n            ? this.state.points.X + 1\r\n            : this.state.points.X,\r\n        O:\r\n          this.state.player == \"O\"\r\n            ? this.state.points.O + 1\r\n            : this.state.points.O,\r\n      },\r\n    });\r\n  };\r\n  componentDidMount = () => {\r\n    this.setState({ player: this.state.first ? \"X\" : \"O\" });\r\n  };\r\n  render = () => {\r\n    const gameOverMsg =\r\n      this.state.player === \"Tie\" ? \"Tie\" : `Winner:  ${this.state.player}`;\r\n    const end = (\r\n      <div id=\"end\">\r\n        <h1>{gameOverMsg}</h1>\r\n        <button onClick={this.newGame}>Play Again</button>\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"App\">\r\n        <div onClick={this.playAudio}>\r\n          <div className=\"header\">\r\n            <h1>Tic Tac Toe</h1>\r\n            <p>\r\n              <FontAwesomeIcon icon={faMusic} />\r\n            </p>\r\n          </div>\r\n          <p\r\n            id=\"audio-msg\"\r\n            className={this.state.audio_play ? \"invisible\" : \"mono\"}\r\n          >\r\n            Click here to play music\r\n          </p>\r\n        </div>\r\n        <table id=\"board\">\r\n          <tbody>\r\n            <tr>{this.rows_fill(0, 3)}</tr>\r\n            <tr>{this.rows_fill(3, 6)}</tr>\r\n            <tr>{this.rows_fill(6, 9)}</tr>\r\n          </tbody>\r\n        </table>\r\n        <div id=\"bottom\" className=\"gc\">\r\n          <div id=\"x-point\" className=\"gi\">\r\n            <h1>Player-X: {this.state.points.X}</h1>\r\n          </div>\r\n          <div id=\"player\" className=\"gi\">\r\n            {this.state.gameOver ? end : <h1>Current: {this.state.player}</h1>}\r\n          </div>\r\n          <div id=\"o-point\" className=\"gi\">\r\n            <h1>Player-O: {this.state.points.O}</h1>\r\n          </div>\r\n        </div>\r\n        <h3 className=\"mono\">\r\n          Made by\r\n          <a\r\n            href=\"https://github.com/akamran2001/Tic-Tac-Toe\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {\" Ahmed Kamran \"}\r\n          </a>\r\n          {\"Music: \"}\r\n          <a\r\n            href=\"https://chll.to/0ac21dd1\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Aiguille - Day and Night\r\n          </a>\r\n        </h3>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}