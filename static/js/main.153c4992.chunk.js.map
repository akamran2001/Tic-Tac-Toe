{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","_super","call","state","player","squares","Array","fill","gameOver","win_line","_this2","boardFull","filter","item","length","winner","find","indices","_indices","slicedToArray","a","b","c","line","every","win","undefined","setState","cell","_this3","getAttribute","setAttribute","map","index","parseInt","id","gameUpdate","start","end","_this4","colors","from","keys","slice","num","react_default","createElement","key","className","includes","onClick","e","play","target","clicked","String","audio","document","querySelector","paused","volume","getElementById","pause","_this5","gameOverMsg","concat","playAudio","react_fontawesome_index_es","icon","faMusic","rows_fill","href","rel","React","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App_App"],"mappings":"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","file":"static/js/main.153c4992.chunk.js","sourcesContent":["import { faMusic } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      player: \"X\",\r\n      squares: Array(9).fill(\"\"),\r\n      gameOver: false,\r\n      win_line: [],\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update the state of the game after every input\r\n   */\r\n  gameUpdate() {\r\n    /**\r\n     * Cells which indicate a vertical, horizontal, or disgonal line\r\n     */\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    /**\r\n     * Board is full when 0 squares are \"\"\r\n     */\r\n    const boardFull =\r\n      this.state.squares.filter((item) => {\r\n        return item === \"\";\r\n      }).length === 0;\r\n    /**\r\n     *  A player has won if they get the same character to fill an entire line\r\n     */\r\n    const winner = lines.find((indices) => {\r\n      const [a, b, c] = indices;\r\n      const line = [\r\n        this.state.squares[a],\r\n        this.state.squares[b],\r\n        this.state.squares[c],\r\n      ];\r\n      return line.every((item) => {\r\n        return item === line[0] && line[0] !== \"\";\r\n      });\r\n    });\r\n    const win = winner !== undefined;\r\n    /**\r\n     * The winning player is \"Tie\" if the board is full and no one has won\r\n     * Game end when someone has won or the board is full\r\n     * The next player gets picked as the opposite player if the game isn't over yet\r\n     */\r\n    this.setState(\r\n      {\r\n        player: boardFull && !win ? \"Tie\" : this.state.player,\r\n        gameOver: win || boardFull,\r\n        win_line: win ? winner : this.state.win_line,\r\n      },\r\n      () => {\r\n        if (!this.state.gameOver) {\r\n          this.setState({ player: this.state.player === \"X\" ? \"O\" : \"X\" });\r\n        }\r\n      }\r\n    );\r\n  }\r\n  /**\r\n   * Handle the user clicking on a cell to input their move\r\n   * @param  {\"event.target\"} cell The target element that registered this onClick event\r\n   */\r\n  play(cell) {\r\n    const clicked = cell.getAttribute(\"clicked\");\r\n    if (clicked === \"false\" && this.state.gameOver !== true) {\r\n      cell.setAttribute(\"clicked\", \"true\");\r\n      this.setState(\r\n        {\r\n          squares: this.state.squares.map((item, index) => {\r\n            return index === parseInt(cell.id) ? this.state.player : item;\r\n          }),\r\n        },\r\n        this.gameUpdate\r\n      );\r\n    }\r\n  }\r\n  /**\r\n   * Create the table data for the board\r\n   * @param  {int} start - Cell # to start from\r\n   * @param  {int} end - Cell # to end (exclusive)\r\n   * @returns JSX elements of specified cell numbers\r\n   */\r\n  rows_fill(start, end) {\r\n    const colors = [\r\n      \"green\",\r\n      \"red\",\r\n      \"red\",\r\n      \"blue\",\r\n      \"green\",\r\n      \"red\",\r\n      \"blue\",\r\n      \"blue\",\r\n      \"green\",\r\n    ];\r\n    return Array.from(Array(10).keys())\r\n      .slice(start, end)\r\n      .map((num) => {\r\n        return (\r\n          <td\r\n            key={num}\r\n            className={this.state.win_line.includes(num) ? \"win\" : colors[num]}\r\n            onClick={(e) => {\r\n              this.play(e.target);\r\n            }}\r\n            clicked={this.state.squares[num] === \"\" ? \"false\" : \"true\"}\r\n            id={String(num)}\r\n          >\r\n            <h1>{this.state.squares[num]}</h1>\r\n          </td>\r\n        );\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Play and pause background music\r\n   */\r\n  playAudio() {\r\n    const audio = document.querySelector(\"audio\");\r\n    if (audio.paused) {\r\n      audio.volume = 0.2;\r\n      audio.play();\r\n      document.getElementById(\"audio-msg\").className = \"invisible\";\r\n    } else {\r\n      audio.pause();\r\n      document.getElementById(\"audio-msg\").className = \"mono\";\r\n    }\r\n  }\r\n  render() {\r\n    const gameOverMsg =\r\n      this.state.player === \"Tie\" ? \"Tie\" : `Winner:  ${this.state.player}`;\r\n    const end = (\r\n      <div id=\"end\">\r\n        <h1>{gameOverMsg}</h1>\r\n        <button\r\n          onClick={() => {\r\n            this.setState({\r\n              player: \"X\",\r\n              squares: Array(9).fill(\"\"),\r\n              gameOver: false,\r\n              win_line: [],\r\n            });\r\n          }}\r\n        >\r\n          Play Again\r\n        </button>\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"App\">\r\n        <div onClick={this.playAudio}>\r\n          <div className=\"header\">\r\n            <h1>Tic Tac Toe</h1>\r\n            <p>\r\n              <FontAwesomeIcon icon={faMusic} />\r\n            </p>\r\n          </div>\r\n          <p id=\"audio-msg\" className=\"mono\">\r\n            Click here to play music\r\n          </p>\r\n        </div>\r\n        <table id=\"board\">\r\n          <tbody>\r\n            <tr>{this.rows_fill(0, 3)}</tr>\r\n            <tr>{this.rows_fill(3, 6)}</tr>\r\n            <tr>{this.rows_fill(6, 9)}</tr>\r\n          </tbody>\r\n        </table>\r\n        <div id=\"bottom\">\r\n          {this.state.gameOver ? end : <h1>Player: {this.state.player}</h1>}\r\n        </div>\r\n        <h3 className=\"mono\">\r\n          Made by\r\n          <a\r\n            href=\"https://github.com/akamran2001/Tic-Tac-Toe\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {\" Ahmed Kamran \"}\r\n          </a>\r\n          {\"Music: \"}\r\n          <a\r\n            href=\"https://chll.to/0ac21dd1\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Aiguille - Day and Night\r\n          </a>\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}