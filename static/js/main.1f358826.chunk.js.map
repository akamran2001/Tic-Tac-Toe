{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","_super","call","state","player","squares","Array","fill","gameOver","win_line","audio_play","audio","Audio","loop","playAudio","bind","assertThisInitialized","newGame","play","_callee","lines","boardFull","winner","win","_this2","regenerator_default","a","wrap","_context","prev","next","range","without","length","find","indices","_indices","slicedToArray","b","c","line","noDup","uniq","undefined","setState","stop","_callee2","e","cell","_this3","_context2","target","getAttribute","setAttribute","map","item","index","parseInt","id","gameUpdate","start","end","_this4","colors","num","react_default","createElement","key","className","includes","onClick","clicked","String","paused","volume","pause","gameOverMsg","concat","react_fontawesome_index_es","icon","faMusic","rows_fill","href","rel","React","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.1f358826.chunk.js","sourcesContent":["import { faMusic } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { range, uniq, without } from \"lodash\";\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      player: \"X\",\r\n      squares: Array(9).fill(\"\"),\r\n      gameOver: false,\r\n      win_line: [],\r\n      audio_play: false,\r\n    };\r\n    this.audio = new Audio(\"https://mp3.chillhop.com/serve.php/?mp3=9272\");\r\n    this.audio.loop = true;\r\n    this.playAudio = this.playAudio.bind(this);\r\n    this.newGame = this.newGame.bind(this);\r\n    this.play = this.play.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Update the state of the game after every input\r\n   */\r\n  async gameUpdate() {\r\n    /**\r\n     * Cells which indicate a vertical, horizontal, or diagonal line\r\n     */\r\n    const lines = [\r\n      range(0, 3),\r\n      range(3, 6),\r\n      range(6, 9),\r\n      range(0, 9, 3),\r\n      range(1, 9, 3),\r\n      range(2, 9, 3),\r\n      range(0, 9, 4),\r\n      range(2, 8, 2),\r\n    ];\r\n    /**\r\n     * Board is full when none of the 9 squares are \"\"\r\n     */\r\n\r\n    const boardFull = without(this.state.squares, \"\").length === 9;\r\n    /**\r\n     *  A player has won if they get the same character to fill an entire line\r\n     */\r\n    const winner = lines.find((indices) => {\r\n      const [a, b, c] = indices;\r\n      const line = [\r\n        this.state.squares[a],\r\n        this.state.squares[b],\r\n        this.state.squares[c],\r\n      ];\r\n      const noDup = uniq(line);\r\n      return noDup.length === 1 && noDup[0] !== \"\";\r\n    });\r\n    const win = winner !== undefined;\r\n    /**\r\n     * The winning player is \"Tie\" if the board is full and no one has won\r\n     * Game end when someone has won or the board is full\r\n     * The next player gets picked as the opposite player if the game isn't over yet\r\n     */\r\n    await this.setState({\r\n      player: boardFull && !win ? \"Tie\" : this.state.player,\r\n      gameOver: win || boardFull,\r\n      win_line: win ? winner : this.state.win_line,\r\n    });\r\n    if (!this.state.gameOver) {\r\n      this.setState({ player: this.state.player === \"X\" ? \"O\" : \"X\" }); //Only switch player after state of game set\r\n    }\r\n  }\r\n  /**\r\n   * Handle the user clicking on a cell to input their move\r\n   * @param  {\"event\"} e The onClick event\r\n   */\r\n  async play(e) {\r\n    const cell = e.target;\r\n    const clicked = cell.getAttribute(\"clicked\");\r\n    if (clicked === \"false\" && this.state.gameOver !== true) {\r\n      cell.setAttribute(\"clicked\", \"true\");\r\n      await this.setState({\r\n        squares: this.state.squares.map((item, index) => {\r\n          return index === parseInt(cell.id) ? this.state.player : item;\r\n        }),\r\n      });\r\n      this.gameUpdate(); //Only update game after state of board set\r\n    }\r\n  }\r\n  /**\r\n   * Create the table data for the board\r\n   * @param  {int} start - Cell # to start from\r\n   * @param  {int} end - Cell # to end (exclusive)\r\n   * @returns JSX elements of specified cell numbers\r\n   */\r\n  rows_fill(start, end) {\r\n    const colors = [\r\n      \"green\",\r\n      \"red\",\r\n      \"red\",\r\n      \"blue\",\r\n      \"green\",\r\n      \"red\",\r\n      \"blue\",\r\n      \"blue\",\r\n      \"green\",\r\n    ];\r\n    return range(start, end).map((num) => {\r\n      return (\r\n        <td\r\n          key={num}\r\n          className={this.state.win_line.includes(num) ? \"win\" : colors[num]}\r\n          onClick={this.play}\r\n          clicked={this.state.squares[num] === \"\" ? \"false\" : \"true\"}\r\n          id={String(num)}\r\n        >\r\n          <h1>{this.state.squares[num]}</h1>\r\n        </td>\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Play and pause background music\r\n   */\r\n  playAudio() {\r\n    if (this.audio.paused) {\r\n      this.audio.volume = 0.2;\r\n      this.audio.play();\r\n      this.setState({ audio_play: true });\r\n    } else {\r\n      this.audio.pause();\r\n      this.setState({ audio_play: false });\r\n    }\r\n  }\r\n  newGame() {\r\n    this.setState({\r\n      player: \"X\",\r\n      squares: Array(9).fill(\"\"),\r\n      gameOver: false,\r\n      win_line: [],\r\n    });\r\n  }\r\n  render() {\r\n    const gameOverMsg =\r\n      this.state.player === \"Tie\" ? \"Tie\" : `Winner:  ${this.state.player}`;\r\n    const end = (\r\n      <div id=\"end\">\r\n        <h1>{gameOverMsg}</h1>\r\n        <button onClick={this.newGame}>Play Again</button>\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"App\">\r\n        <div onClick={this.playAudio}>\r\n          <div className=\"header\">\r\n            <h1>Tic Tac Toe</h1>\r\n            <p>\r\n              <FontAwesomeIcon icon={faMusic} />\r\n            </p>\r\n          </div>\r\n          <p\r\n            id=\"audio-msg\"\r\n            className={this.state.audio_play ? \"invisible\" : \"mono\"}\r\n          >\r\n            Click here to play music\r\n          </p>\r\n        </div>\r\n        <table id=\"board\">\r\n          <tbody>\r\n            <tr>{this.rows_fill(0, 3)}</tr>\r\n            <tr>{this.rows_fill(3, 6)}</tr>\r\n            <tr>{this.rows_fill(6, 9)}</tr>\r\n          </tbody>\r\n        </table>\r\n        <div id=\"bottom\">\r\n          {this.state.gameOver ? end : <h1>Player: {this.state.player}</h1>}\r\n        </div>\r\n        <h3 className=\"mono\">\r\n          Made by\r\n          <a\r\n            href=\"https://github.com/akamran2001/Tic-Tac-Toe\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {\" Ahmed Kamran \"}\r\n          </a>\r\n          {\"Music: \"}\r\n          <a\r\n            href=\"https://chll.to/0ac21dd1\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Aiguille - Day and Night\r\n          </a>\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}