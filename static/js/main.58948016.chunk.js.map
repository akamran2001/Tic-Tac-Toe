{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","_super","call","state","first","random","player","squares","Array","fill","gameOver","win_line","audio_play","points","X","O","audio","Audio","loop","playAudio","bind","assertThisInitialized","newGame","play","updatePoint","_callee","lines","boardFull","winner","win","_this2","regenerator_default","a","wrap","_context","prev","next","range","forEach","num","push","without","length","find","indices","_indices","slicedToArray","b","c","line","noDup","uniq","undefined","setState","stop","_callee2","e","cell","cell_id","_context2","target","parseInt","id","getAttribute","setAttribute","slice","concat","gameUpdate","start","end","_this3","colors","map","react_default","createElement","key","className","includes","onClick","clicked","String","paused","volume","pause","gameOverMsg","react_fontawesome_index_es","icon","faMusic","rows_fill","href","rel","React","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.58948016.chunk.js","sourcesContent":["import { faMusic } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { random, range, uniq, without } from \"lodash\";\r\nimport React from \"react\";\r\nimport \"./App.css\";\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      first: [true, false][random(0, 1, false)], //true = X, false = O\r\n      player: \"\",\r\n      squares: Array(9).fill(\"\"),\r\n      gameOver: false,\r\n      win_line: [],\r\n      audio_play: false,\r\n      points: {\r\n        X: 0,\r\n        O: 0,\r\n      },\r\n    };\r\n    this.audio = new Audio(\"https://mp3.chillhop.com/serve.php/?mp3=9272\");\r\n    this.audio.loop = true;\r\n    this.playAudio = this.playAudio.bind(this);\r\n    this.newGame = this.newGame.bind(this);\r\n    this.play = this.play.bind(this);\r\n    this.updatePoint = this.updatePoint.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Update the state of the game after every input\r\n   */\r\n  async gameUpdate() {\r\n    /**\r\n     * Cells which indicate a vertical, horizontal, or diagonal line\r\n     */\r\n    const lines = [range(0, 9, 4), range(2, 8, 2)];\r\n    [0, 3, 6].forEach((num) => lines.push(range(num, num + 3)));\r\n    [0, 1, 2].forEach((num) => lines.push(range(num, 9, 3)));\r\n    /**\r\n     * Board is full when none of the 9 squares are \"\"\r\n     */\r\n\r\n    const boardFull = without(this.state.squares, \"\").length === 9;\r\n    /**\r\n     *  A player has won if they get the same character to fill an entire line\r\n     */\r\n    const winner = lines.find((indices) => {\r\n      const [a, b, c] = indices;\r\n      const line = [\r\n        this.state.squares[a],\r\n        this.state.squares[b],\r\n        this.state.squares[c],\r\n      ];\r\n      const noDup = uniq(line);\r\n      return noDup.length === 1 && noDup[0] !== \"\";\r\n    });\r\n    const win = winner !== undefined;\r\n    /**\r\n     * The winning player is \"Tie\" if the board is full and no one has won\r\n     * Game end when someone has won or the board is full\r\n     * The next player gets picked as the opposite player if the game isn't over yet\r\n     */\r\n    await this.setState({\r\n      player: boardFull && !win ? \"Tie\" : this.state.player,\r\n      gameOver: win || boardFull,\r\n      win_line: win ? winner : this.state.win_line,\r\n    });\r\n\r\n    if (!this.state.gameOver) {\r\n      this.setState({ player: this.state.player === \"X\" ? \"O\" : \"X\" }); //Only switch player after state of game set\r\n    } else {\r\n      this.updatePoint();\r\n    }\r\n  }\r\n  /**\r\n   * Handle the user clicking on a cell to input their move\r\n   * @param  {\"event\"} e The onClick event\r\n   */\r\n  async play(e) {\r\n    const cell = e.target;\r\n    const cell_id = parseInt(cell.id);\r\n    const clicked = cell.getAttribute(\"clicked\");\r\n    if (clicked === \"false\" && this.state.gameOver !== true) {\r\n      cell.setAttribute(\"clicked\", \"true\");\r\n      await this.setState({\r\n        squares: this.state.squares\r\n          .slice(0, cell_id)\r\n          .concat(this.state.player) //Replace selected cell with player character\r\n          .concat(this.state.squares.slice(cell_id + 1)),\r\n      });\r\n      this.gameUpdate(); //Only update game after state of board set\r\n    }\r\n  }\r\n  /**\r\n   * Create the table data for the board\r\n   * @param  {int} start - Cell # to start from\r\n   * @param  {int} end - Cell # to end (exclusive)\r\n   * @returns JSX elements of specified cell numbers\r\n   */\r\n  rows_fill(start, end) {\r\n    const colors = [\r\n      \"green\",\r\n      \"red\",\r\n      \"red\",\r\n      \"blue\",\r\n      \"green\",\r\n      \"red\",\r\n      \"blue\",\r\n      \"blue\",\r\n      \"green\",\r\n    ];\r\n    return range(start, end).map((num) => {\r\n      return (\r\n        <td\r\n          key={num}\r\n          className={this.state.win_line.includes(num) ? \"win\" : colors[num]}\r\n          onClick={this.play}\r\n          clicked={this.state.squares[num] === \"\" ? \"false\" : \"true\"}\r\n          id={String(num)}\r\n        >\r\n          <h1>{this.state.squares[num]}</h1>\r\n        </td>\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Play and pause background music\r\n   */\r\n  playAudio() {\r\n    if (this.audio.paused) {\r\n      this.audio.volume = 0.2;\r\n      this.audio.play();\r\n      this.setState({ audio_play: true });\r\n    } else {\r\n      this.audio.pause();\r\n      this.setState({ audio_play: false });\r\n    }\r\n  }\r\n  newGame() {\r\n    this.setState({\r\n      player: !this.state.first ? \"X\" : \"O\",\r\n      first: !this.state.first,\r\n      squares: Array(9).fill(\"\"),\r\n      gameOver: false,\r\n      win_line: [],\r\n    });\r\n  }\r\n  updatePoint() {\r\n    this.setState({\r\n      points: {\r\n        X:\r\n          this.state.player == \"X\"\r\n            ? this.state.points.X + 1\r\n            : this.state.points.X,\r\n        O:\r\n          this.state.player == \"O\"\r\n            ? this.state.points.O + 1\r\n            : this.state.points.O,\r\n      },\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ player: this.state.first ? \"X\" : \"O\" });\r\n  }\r\n  render() {\r\n    const gameOverMsg =\r\n      this.state.player === \"Tie\" ? \"Tie\" : `Winner:  ${this.state.player}`;\r\n    const end = (\r\n      <div id=\"end\">\r\n        <h1>{gameOverMsg}</h1>\r\n        <button onClick={this.newGame}>Play Again</button>\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"App\">\r\n        <div onClick={this.playAudio}>\r\n          <div className=\"header\">\r\n            <h1>Tic Tac Toe</h1>\r\n            <p>\r\n              <FontAwesomeIcon icon={faMusic} />\r\n            </p>\r\n          </div>\r\n          <p\r\n            id=\"audio-msg\"\r\n            className={this.state.audio_play ? \"invisible\" : \"mono\"}\r\n          >\r\n            Click here to play music\r\n          </p>\r\n        </div>\r\n        <table id=\"board\">\r\n          <tbody>\r\n            <tr>{this.rows_fill(0, 3)}</tr>\r\n            <tr>{this.rows_fill(3, 6)}</tr>\r\n            <tr>{this.rows_fill(6, 9)}</tr>\r\n          </tbody>\r\n        </table>\r\n        <div id=\"bottom\" className=\"gc\">\r\n          <div id=\"x-point\" className=\"gi\">\r\n            <h1>Player-X: {this.state.points.X}</h1>\r\n          </div>\r\n          <div id=\"player\" className=\"gi\">\r\n            {this.state.gameOver ? end : <h1>Current: {this.state.player}</h1>}\r\n          </div>\r\n          <div id=\"o-point\" className=\"gi\">\r\n            <h1>Player-O: {this.state.points.O}</h1>\r\n          </div>\r\n        </div>\r\n        <h3 className=\"mono\">\r\n          Made by\r\n          <a\r\n            href=\"https://github.com/akamran2001/Tic-Tac-Toe\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {\" Ahmed Kamran \"}\r\n          </a>\r\n          {\"Music: \"}\r\n          <a\r\n            href=\"https://chll.to/0ac21dd1\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Aiguille - Day and Night\r\n          </a>\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}